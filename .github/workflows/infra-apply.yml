name: Terraform Apply

on:
  push:
    branches: [ main ]
    paths:
      - 'terraform/**'
      - '.github/workflows/infra-apply.yml'
  workflow_dispatch:

jobs:
  terraform:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    env:
      TF_WORKDIR: terraform
      AWS_REGION: ${{ vars.AWS_REGION || 'ap-northeast-1' }}
      TF_STATE_BUCKET: ${{ secrets.TF_STATE_BUCKET }}
      TF_STATE_KEY: ${{ vars.TF_STATE_KEY || 'infra/terraform.tfstate' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Configure AWS Credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Terraform Init
        working-directory: ${{ env.TF_WORKDIR }}
        run: |
          set -euo pipefail
          if [ -z "${TF_STATE_BUCKET:-}" ]; then
            echo "TF_STATE_BUCKET secret is required for remote state." >&2
            exit 1
          fi
          if [ -z "${TF_STATE_KEY:-}" ]; then
            echo "TF_STATE_KEY variable is required for remote state." >&2
            exit 1
          fi

          args=(
            "-backend-config=bucket=${TF_STATE_BUCKET}"
            "-backend-config=key=${TF_STATE_KEY}"
            "-backend-config=region=${AWS_REGION}"
          )

          terraform init -input=false "${args[@]}"

      - name: Terraform Fmt
        working-directory: ${{ env.TF_WORKDIR }}
        run: terraform fmt -check

      - name: Terraform Validate
        working-directory: ${{ env.TF_WORKDIR }}
        run: terraform validate

      - name: Terraform Plan
        id: plan
        working-directory: ${{ env.TF_WORKDIR }}
        run: |
          set -e
          terraform plan -input=false -out=tfplan
          terraform show -json tfplan > tfplan.json
          if jq -e '.resource_changes | length == 0' tfplan.json >/dev/null; then
            echo "changes=false" >> $GITHUB_OUTPUT
          else
            echo "changes=true" >> $GITHUB_OUTPUT
          fi
      - name: Show Plan
        if: steps.plan.outputs.changes == 'true'
        working-directory: ${{ env.TF_WORKDIR }}
        run: terraform show -no-color tfplan

      - name: Terraform Apply
        if: steps.plan.outputs.changes == 'true'
        working-directory: ${{ env.TF_WORKDIR }}
        run: terraform apply -input=false tfplan
